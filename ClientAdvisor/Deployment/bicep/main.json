{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.28.1.47646",
      "templateHash": "9067981480337712099"
    }
  },
  "parameters": {
    "solutionPrefix": {
      "type": "string",
      "minLength": 3,
      "maxLength": 6,
      "metadata": {
        "description": "Prefix Name"
      }
    },
    "cosmosLocation": {
      "type": "string",
      "metadata": {
        "description": "CosmosDB Location"
      }
    }
  },
  "variables": {
    "resourceGroupLocation": "[resourceGroup().location]",
    "resourceGroupName": "[resourceGroup().name]",
    "solutionLocation": "[variables('resourceGroupLocation')]",
    "baseUrl": "https://raw.githubusercontent.com/nchandhi/ncwadeploymentps/main/ClientAdvisor/"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_managed_identity",
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "solutionName": {
            "value": "[parameters('solutionPrefix')]"
          },
          "solutionLocation": {
            "value": "[variables('solutionLocation')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "14133192615685065374"
            }
          },
          "parameters": {
            "solutionName": {
              "type": "string",
              "minLength": 3,
              "maxLength": 15,
              "metadata": {
                "description": "Solution Name"
              }
            },
            "solutionLocation": {
              "type": "string",
              "metadata": {
                "description": "Solution Location"
              }
            },
            "miName": {
              "type": "string",
              "defaultValue": "[format('{0}-managed-identity', parameters('solutionName'))]",
              "metadata": {
                "description": "Name"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "name": "[parameters('miName')]",
              "location": "[parameters('solutionLocation')]",
              "tags": {
                "app": "[parameters('solutionName')]",
                "location": "[parameters('solutionLocation')]"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceGroup().id, resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miName')), resourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635'))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miName')), '2023-01-31').principalId]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miName'))]"
              ]
            }
          ],
          "outputs": {
            "managedIdentityOutput": {
              "type": "object",
              "value": {
                "id": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miName'))]",
                "objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miName')), '2023-01-31').principalId]",
                "name": "[parameters('miName')]"
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_cosmos_db",
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "solutionName": {
            "value": "[parameters('solutionPrefix')]"
          },
          "solutionLocation": {
            "value": "[parameters('cosmosLocation')]"
          },
          "identity": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityOutput.value.objectId]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "3150658961575622806"
            }
          },
          "parameters": {
            "solutionName": {
              "type": "string",
              "minLength": 3,
              "maxLength": 15,
              "metadata": {
                "description": "Solution Name"
              }
            },
            "solutionLocation": {
              "type": "string"
            },
            "accountName": {
              "type": "string",
              "defaultValue": "[format('{0}-cosmos', parameters('solutionName'))]",
              "metadata": {
                "description": "Name"
              }
            },
            "databaseName": {
              "type": "string",
              "defaultValue": "db_conversation_history"
            },
            "collectionName": {
              "type": "string",
              "defaultValue": "conversations"
            },
            "identity": {
              "type": "string"
            },
            "containers": {
              "type": "array",
              "defaultValue": [
                {
                  "name": "[parameters('collectionName')]",
                  "id": "[parameters('collectionName')]",
                  "partitionKey": "/userId"
                }
              ]
            },
            "kind": {
              "type": "string",
              "defaultValue": "GlobalDocumentDB",
              "allowedValues": [
                "GlobalDocumentDB",
                "MongoDB",
                "Parse"
              ]
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "copy": {
                "name": "list",
                "count": "[length(parameters('containers'))]"
              },
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
              "apiVersion": "2022-05-15",
              "name": "[format('{0}/{1}/{2}', split(format('{0}/{1}', parameters('accountName'), parameters('databaseName')), '/')[0], split(format('{0}/{1}', parameters('accountName'), parameters('databaseName')), '/')[1], parameters('containers')[copyIndex()].name)]",
              "properties": {
                "resource": {
                  "id": "[parameters('containers')[copyIndex()].id]",
                  "partitionKey": {
                    "paths": [
                      "[parameters('containers')[copyIndex()].partitionKey]"
                    ]
                  }
                },
                "options": {}
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', split(format('{0}/{1}', parameters('accountName'), parameters('databaseName')), '/')[0], split(format('{0}/{1}', parameters('accountName'), parameters('databaseName')), '/')[1])]"
              ]
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts",
              "apiVersion": "2022-08-15",
              "name": "[parameters('accountName')]",
              "kind": "[parameters('kind')]",
              "location": "[parameters('solutionLocation')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "consistencyPolicy": {
                  "defaultConsistencyLevel": "Session"
                },
                "locations": [
                  {
                    "locationName": "[parameters('solutionLocation')]",
                    "failoverPriority": 0,
                    "isZoneRedundant": false
                  }
                ],
                "databaseAccountOfferType": "Standard",
                "enableAutomaticFailover": false,
                "enableMultipleWriteLocations": false,
                "apiProperties": "[if(equals(parameters('kind'), 'MongoDB'), createObject('serverVersion', '4.0'), createObject())]",
                "capabilities": [
                  {
                    "name": "EnableServerless"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
              "apiVersion": "2022-05-15",
              "name": "[format('{0}/{1}', parameters('accountName'), parameters('databaseName'))]",
              "properties": {
                "resource": {
                  "id": "[parameters('databaseName')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('accountName'))]"
              ]
            }
          ],
          "outputs": {
            "cosmosOutput": {
              "type": "object",
              "value": {
                "cosmosAccountName": "[parameters('accountName')]",
                "cosmosAccountKey": "[listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('accountName')), '2022-08-15').primaryMasterKey]",
                "cosmosDatabaseName": "[parameters('databaseName')]",
                "cosmosContainerName": "[parameters('collectionName')]"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_storage_account",
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "solutionName": {
            "value": "[parameters('solutionPrefix')]"
          },
          "solutionLocation": {
            "value": "[variables('solutionLocation')]"
          },
          "managedIdentityObjectId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityOutput.value.objectId]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "7107429209445703694"
            }
          },
          "parameters": {
            "solutionName": {
              "type": "string",
              "minLength": 3,
              "maxLength": 15,
              "metadata": {
                "description": "Solution Name"
              }
            },
            "solutionLocation": {
              "type": "string",
              "metadata": {
                "description": "Solution Location"
              }
            },
            "saName": {
              "type": "string",
              "defaultValue": "[format('{0}storageaccount', parameters('solutionName'))]",
              "metadata": {
                "description": "Name"
              }
            },
            "managedIdentityObjectId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2022-09-01",
              "name": "[parameters('saName')]",
              "location": "[parameters('solutionLocation')]",
              "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
              },
              "kind": "StorageV2",
              "properties": {
                "minimumTlsVersion": "TLS1_2",
                "allowBlobPublicAccess": false,
                "isHnsEnabled": true,
                "networkAcls": {
                  "bypass": "AzureServices",
                  "virtualNetworkRules": [],
                  "ipRules": [],
                  "defaultAction": "Allow"
                },
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                  "services": {
                    "file": {
                      "keyType": "Account",
                      "enabled": true
                    },
                    "blob": {
                      "keyType": "Account",
                      "enabled": true
                    }
                  },
                  "keySource": "Microsoft.Storage"
                },
                "accessTier": "Hot"
              }
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}/{1}', parameters('saName'), 'default')]",
              "properties": {
                "cors": {
                  "corsRules": []
                },
                "deleteRetentionPolicy": {
                  "allowPermanentDelete": false,
                  "enabled": false
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('saName'))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}/{1}/{2}', parameters('saName'), 'default', 'data')]",
              "properties": {
                "defaultEncryptionScope": "$account-encryption-key",
                "denyEncryptionScopeOverride": false,
                "publicAccess": "None"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('saName'), 'default')]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceGroup().id, parameters('managedIdentityObjectId'), resourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe'))]",
              "properties": {
                "principalId": "[parameters('managedIdentityObjectId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                "principalType": "ServicePrincipal"
              }
            }
          ],
          "outputs": {
            "storageAccountOutput": {
              "type": "object",
              "value": {
                "id": "[resourceId('Microsoft.Storage/storageAccounts', parameters('saName'))]",
                "name": "[parameters('saName')]",
                "uri": "[reference(resourceId('Microsoft.Storage/storageAccounts', parameters('saName')), '2022-09-01').primaryEndpoints.web]",
                "dfs": "[reference(resourceId('Microsoft.Storage/storageAccounts', parameters('saName')), '2022-09-01').primaryEndpoints.dfs]",
                "storageAccountName": "[parameters('saName')]",
                "key": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('saName')), '2021-04-01').keys[0].value]",
                "connectionString": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix={2}', parameters('saName'), listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('saName')), '2022-09-01').keys[0].value, environment().suffixes.storage)]",
                "dataContainer": "data"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_postgres_sql",
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "solutionName": {
            "value": "[parameters('solutionPrefix')]"
          },
          "solutionLocation": {
            "value": "[parameters('cosmosLocation')]"
          },
          "managedIdentityObjectId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityOutput.value.objectId]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "6840365401184602512"
            }
          },
          "parameters": {
            "solutionName": {
              "type": "string"
            },
            "solutionLocation": {
              "type": "string"
            },
            "managedIdentityObjectId": {
              "type": "string"
            },
            "serverName": {
              "type": "string",
              "defaultValue": "[format('{0}-postgres', parameters('solutionName'))]",
              "metadata": {
                "description": "The name of the SQL logical server."
              }
            },
            "administratorLogin": {
              "type": "string",
              "defaultValue": "admintest"
            },
            "administratorLoginPassword": {
              "type": "securestring",
              "defaultValue": "Initial_0524"
            },
            "serverEdition": {
              "type": "string",
              "defaultValue": "Burstable"
            },
            "skuSizeGB": {
              "type": "int",
              "defaultValue": 32
            },
            "dbInstanceType": {
              "type": "string",
              "defaultValue": "Standard_B1ms"
            },
            "availabilityZone": {
              "type": "string",
              "defaultValue": "1"
            },
            "version": {
              "type": "string",
              "defaultValue": "16",
              "allowedValues": [
                "11",
                "12",
                "13",
                "14",
                "15",
                "16"
              ],
              "metadata": {
                "description": "PostgreSQL version"
              }
            }
          },
          "variables": {
            "firewallrules": [
              {
                "Name": "rule1",
                "StartIpAddress": "0.0.0.0",
                "EndIpAddress": "255.255.255.255"
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.DBforPostgreSQL/flexibleServers",
              "apiVersion": "2021-06-01",
              "name": "[parameters('serverName')]",
              "location": "[parameters('solutionLocation')]",
              "sku": {
                "name": "[parameters('dbInstanceType')]",
                "tier": "[parameters('serverEdition')]"
              },
              "properties": {
                "version": "[parameters('version')]",
                "administratorLogin": "[parameters('administratorLogin')]",
                "administratorLoginPassword": "[parameters('administratorLoginPassword')]",
                "highAvailability": {
                  "mode": "Disabled"
                },
                "storage": {
                  "storageSizeGB": "[parameters('skuSizeGB')]"
                },
                "backup": {
                  "backupRetentionDays": 7,
                  "geoRedundantBackup": "Disabled"
                },
                "availabilityZone": "[parameters('availabilityZone')]"
              }
            },
            {
              "copy": {
                "name": "serverName_firewallrules",
                "count": "[length(variables('firewallrules'))]"
              },
              "type": "Microsoft.DBforPostgreSQL/flexibleServers/firewallRules",
              "apiVersion": "2021-06-01",
              "name": "[format('{0}/{1}', parameters('serverName'), variables('firewallrules')[copyIndex()].Name)]",
              "properties": {
                "startIpAddress": "[variables('firewallrules')[copyIndex()].StartIpAddress]",
                "endIpAddress": "[variables('firewallrules')[copyIndex()].EndIpAddress]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('serverName'))]"
              ]
            },
            {
              "type": "Microsoft.DBforPostgreSQL/flexibleServers/configurations",
              "apiVersion": "2023-03-01-preview",
              "name": "[format('{0}/{1}', parameters('serverName'), 'azure.extensions')]",
              "properties": {
                "value": "vector",
                "source": "user-override"
              },
              "dependsOn": [
                "serverName_firewallrules",
                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('serverName'))]"
              ]
            }
          ],
          "outputs": {
            "postgreSQLDbOutput": {
              "type": "object",
              "value": {
                "postgreSQLServerName": "[parameters('serverName')]",
                "postgreSQLDatabaseName": "postgres",
                "postgreSQLDbUser": "[parameters('administratorLogin')]",
                "postgreSQLDbPwd": "[parameters('administratorLoginPassword')]",
                "sslMode": "Require"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_azure_ai_service",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "solutionName": {
            "value": "[parameters('solutionPrefix')]"
          },
          "solutionLocation": {
            "value": "[variables('solutionLocation')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "13579945607876056775"
            }
          },
          "parameters": {
            "solutionName": {
              "type": "string",
              "minLength": 3,
              "maxLength": 15,
              "metadata": {
                "description": "Solution Name"
              }
            },
            "solutionLocation": {
              "type": "string"
            },
            "accounts_byc_cogser_name": {
              "type": "string",
              "defaultValue": "[format('{0}-cogser', parameters('solutionName'))]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2023-05-01",
              "name": "[parameters('accounts_byc_cogser_name')]",
              "location": "[parameters('solutionLocation')]",
              "sku": {
                "name": "S0"
              },
              "kind": "CognitiveServices",
              "identity": {
                "type": "None"
              },
              "properties": {
                "apiProperties": {},
                "customSubDomainName": "[parameters('accounts_byc_cogser_name')]",
                "networkAcls": {
                  "defaultAction": "Allow",
                  "virtualNetworkRules": [],
                  "ipRules": []
                },
                "publicNetworkAccess": "Enabled"
              }
            }
          ],
          "outputs": {
            "cogSearchOutput": {
              "type": "object",
              "value": {
                "cogServiceName": "[parameters('accounts_byc_cogser_name')]",
                "cogServiceKey": "[listKeys(resourceId('Microsoft.CognitiveServices/accounts', parameters('accounts_byc_cogser_name')), '2023-05-01').key1]",
                "cogServiceEndpoint": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('accounts_byc_cogser_name')), '2023-05-01').endpoint]"
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_ai_search_service",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "solutionName": {
            "value": "[parameters('solutionPrefix')]"
          },
          "solutionLocation": {
            "value": "[variables('solutionLocation')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "1115057879253008311"
            }
          },
          "parameters": {
            "solutionName": {
              "type": "string",
              "minLength": 3,
              "maxLength": 15,
              "metadata": {
                "description": "Solution Name"
              }
            },
            "solutionLocation": {
              "type": "string"
            },
            "searchServices_byc_cs_name": {
              "type": "string",
              "defaultValue": "[format('{0}-cs', parameters('solutionName'))]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Search/searchServices",
              "apiVersion": "2023-11-01",
              "name": "[parameters('searchServices_byc_cs_name')]",
              "location": "[parameters('solutionLocation')]",
              "tags": {
                "ProjectType": "aoai-your-data-service"
              },
              "sku": {
                "name": "basic"
              },
              "properties": {
                "replicaCount": 1,
                "partitionCount": 1,
                "hostingMode": "default",
                "publicNetworkAccess": "enabled",
                "networkRuleSet": {
                  "ipRules": []
                },
                "encryptionWithCmk": {
                  "enforcement": "Unspecified"
                },
                "disableLocalAuth": false,
                "authOptions": {
                  "apiKeyOnly": {}
                },
                "semanticSearch": "free"
              }
            }
          ],
          "outputs": {
            "searchServiceOutput": {
              "type": "object",
              "value": {
                "searchServiceName": "[parameters('searchServices_byc_cs_name')]",
                "searchServiceAdminKey": "[listAdminKeys(resourceId('Microsoft.Search/searchServices', parameters('searchServices_byc_cs_name')), '2023-11-01').primaryKey]",
                "searchServiceEndpoint": "[format('https://{0}.search.windows.net', parameters('searchServices_byc_cs_name'))]"
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_azure_open_ai",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "solutionName": {
            "value": "[parameters('solutionPrefix')]"
          },
          "solutionLocation": {
            "value": "[variables('resourceGroupLocation')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "16634912007560166724"
            }
          },
          "parameters": {
            "solutionName": {
              "type": "string",
              "minLength": 3,
              "maxLength": 15,
              "metadata": {
                "description": "Solution Name"
              }
            },
            "solutionLocation": {
              "type": "string"
            },
            "accounts_byc_openai_name": {
              "type": "string",
              "defaultValue": "[format('{0}-openai', parameters('solutionName'))]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2023-05-01",
              "name": "[parameters('accounts_byc_openai_name')]",
              "location": "[parameters('solutionLocation')]",
              "sku": {
                "name": "S0"
              },
              "kind": "OpenAI",
              "properties": {
                "customSubDomainName": "[parameters('accounts_byc_openai_name')]",
                "networkAcls": {
                  "defaultAction": "Allow",
                  "virtualNetworkRules": [],
                  "ipRules": []
                },
                "publicNetworkAccess": "Enabled"
              }
            },
            {
              "type": "Microsoft.CognitiveServices/accounts/deployments",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', parameters('accounts_byc_openai_name'), 'gpt-4')]",
              "sku": {
                "name": "Standard",
                "capacity": 10
              },
              "properties": {
                "model": {
                  "format": "OpenAI",
                  "name": "gpt-4",
                  "version": "0125-Preview"
                },
                "versionUpgradeOption": "OnceCurrentVersionExpired",
                "raiPolicyName": "Microsoft.Default"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('accounts_byc_openai_name'))]"
              ]
            },
            {
              "type": "Microsoft.CognitiveServices/accounts/deployments",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', parameters('accounts_byc_openai_name'), 'text-embedding-ada-002')]",
              "sku": {
                "name": "Standard",
                "capacity": 45
              },
              "properties": {
                "model": {
                  "format": "OpenAI",
                  "name": "text-embedding-ada-002",
                  "version": "2"
                },
                "versionUpgradeOption": "OnceNewDefaultVersionAvailable",
                "raiPolicyName": "Microsoft.Default"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts/deployments', parameters('accounts_byc_openai_name'), 'gpt-4')]",
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('accounts_byc_openai_name'))]"
              ]
            }
          ],
          "outputs": {
            "openAIOutput": {
              "type": "object",
              "value": {
                "openAPIKey": "[listKeys(resourceId('Microsoft.CognitiveServices/accounts', parameters('accounts_byc_openai_name')), '2023-05-01').key1]",
                "openAPIVersion": "2023-05-01",
                "openAPIEndpoint": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('accounts_byc_openai_name')), '2023-05-01').endpoint]",
                "openAIAccountName": "[parameters('accounts_byc_openai_name')]"
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_upload_files_script",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_storage_account'), '2022-09-01').outputs.storageAccountOutput.value.name]"
          },
          "solutionLocation": {
            "value": "[variables('solutionLocation')]"
          },
          "containerName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_storage_account'), '2022-09-01').outputs.storageAccountOutput.value.dataContainer]"
          },
          "identity": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityOutput.value.id]"
          },
          "storageAccountKey": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_storage_account'), '2022-09-01').outputs.storageAccountOutput.value.key]"
          },
          "baseUrl": {
            "value": "[variables('baseUrl')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "11457072075934122081"
            }
          },
          "parameters": {
            "solutionLocation": {
              "type": "string",
              "metadata": {
                "description": "Specifies the location for resources."
              }
            },
            "storageAccountKey": {
              "type": "securestring"
            },
            "storageAccountName": {
              "type": "string"
            },
            "containerName": {
              "type": "string"
            },
            "identity": {
              "type": "string"
            },
            "baseUrl": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2020-10-01",
              "name": "copy_demo_Data",
              "kind": "AzureCLI",
              "location": "[parameters('solutionLocation')]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', parameters('identity'))]": {}
                }
              },
              "properties": {
                "azCliVersion": "2.50.0",
                "primaryScriptUri": "[format('{0}Deployment/scripts/copy_kb_files.sh', parameters('baseUrl'))]",
                "arguments": "[format('{0} {1} {2} {3}', parameters('storageAccountName'), parameters('containerName'), parameters('storageAccountKey'), parameters('baseUrl'))]",
                "timeout": "PT1H",
                "retentionInterval": "PT1H",
                "cleanupPreference": "OnSuccess"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_storage_account')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_azure_function_script",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "solutionName": {
            "value": "[parameters('solutionPrefix')]"
          },
          "solutionLocation": {
            "value": "[variables('solutionLocation')]"
          },
          "resourceGroupName": {
            "value": "[variables('resourceGroupName')]"
          },
          "azureOpenAIApiKey": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'deploy_azure_open_ai'), '2022-09-01').outputs.openAIOutput.value.openAPIKey]"
          },
          "azureOpenAIApiVersion": {
            "value": "2024-02-15-preview"
          },
          "azureOpenAIEndpoint": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'deploy_azure_open_ai'), '2022-09-01').outputs.openAIOutput.value.openAPIEndpoint]"
          },
          "azureSearchAdminKey": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'deploy_ai_search_service'), '2022-09-01').outputs.searchServiceOutput.value.searchServiceAdminKey]"
          },
          "azureSearchServiceEndpoint": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'deploy_ai_search_service'), '2022-09-01').outputs.searchServiceOutput.value.searchServiceEndpoint]"
          },
          "azureSearchIndex": {
            "value": "transcripts_index"
          },
          "postgresqlServerName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_postgres_sql'), '2022-09-01').outputs.postgreSQLDbOutput.value.postgresqlServerName]"
          },
          "postgresqlDbName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_postgres_sql'), '2022-09-01').outputs.postgreSQLDbOutput.value.postgresqlDbName]"
          },
          "postgresqlDbUser": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_postgres_sql'), '2022-09-01').outputs.postgreSQLDbOutput.value.postgresqlDbUser]"
          },
          "postgresqlDbPwd": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_postgres_sql'), '2022-09-01').outputs.postgreSQLDbOutput.value.postgresqlDbPwd]"
          },
          "sslMode": {
            "value": "Require"
          },
          "identity": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityOutput.value.id]"
          },
          "baseUrl": {
            "value": "[variables('baseUrl')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "11800751291607617728"
            }
          },
          "parameters": {
            "solutionName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the location for resources."
              }
            },
            "solutionLocation": {
              "type": "string"
            },
            "resourceGroupName": {
              "type": "string"
            },
            "identity": {
              "type": "string"
            },
            "baseUrl": {
              "type": "string"
            },
            "azureOpenAIApiKey": {
              "type": "securestring"
            },
            "azureOpenAIApiVersion": {
              "type": "string"
            },
            "azureOpenAIEndpoint": {
              "type": "string"
            },
            "azureSearchAdminKey": {
              "type": "securestring"
            },
            "azureSearchServiceEndpoint": {
              "type": "string"
            },
            "azureSearchIndex": {
              "type": "string"
            },
            "postgresqlServerName": {
              "type": "string"
            },
            "postgresqlDbName": {
              "type": "string"
            },
            "postgresqlDbUser": {
              "type": "string"
            },
            "postgresqlDbPwd": {
              "type": "securestring"
            },
            "sslMode": {
              "type": "string",
              "defaultValue": "require"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2020-10-01",
              "name": "deploy_azure_function",
              "kind": "AzureCLI",
              "location": "[parameters('solutionLocation')]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', parameters('identity'))]": {}
                }
              },
              "properties": {
                "azCliVersion": "2.50.0",
                "primaryScriptUri": "[format('{0}Deployment/scripts/create_azure_functions.sh', parameters('baseUrl'))]",
                "arguments": "[format('{0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12} {13} {14}', parameters('solutionName'), parameters('solutionLocation'), parameters('resourceGroupName'), parameters('baseUrl'), parameters('azureOpenAIApiKey'), parameters('azureOpenAIApiVersion'), parameters('azureOpenAIEndpoint'), parameters('azureSearchAdminKey'), parameters('azureSearchServiceEndpoint'), parameters('azureSearchIndex'), parameters('postgresqlServerName'), parameters('postgresqlDbName'), parameters('postgresqlDbUser'), parameters('postgresqlDbPwd'), parameters('sslMode'))]",
                "timeout": "PT1H",
                "retentionInterval": "PT1H",
                "cleanupPreference": "OnSuccess"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'deploy_azure_open_ai')]",
        "[resourceId('Microsoft.Resources/deployments', 'deploy_ai_search_service')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_postgres_sql')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_storage_account')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_azure_function_script_url",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "solutionName": {
            "value": "[parameters('solutionPrefix')]"
          },
          "identity": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityOutput.value.id]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "9511772940816294948"
            }
          },
          "parameters": {
            "solutionName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the location for resources."
              }
            },
            "identity": {
              "type": "string"
            }
          },
          "variables": {
            "functionAppName": "[format('{0}fn', parameters('solutionName'))]",
            "functionName": "stream_openai_text"
          },
          "resources": [],
          "outputs": {
            "functionAppUrl": {
              "type": "string",
              "value": "[format('https://{0}/api/{1}', reference(resourceId('Microsoft.Web/sites', variables('functionAppName')), '2021-02-01').defaultHostName, variables('functionName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'deploy_azure_function_script')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_keyvault",
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "solutionName": {
            "value": "[parameters('solutionPrefix')]"
          },
          "solutionLocation": {
            "value": "[variables('solutionLocation')]"
          },
          "objectId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityOutput.value.objectId]"
          },
          "tenantId": {
            "value": "[subscription().tenantId]"
          },
          "managedIdentityObjectId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityOutput.value.objectId]"
          },
          "adlsAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_storage_account'), '2022-09-01').outputs.storageAccountOutput.value.storageAccountName]"
          },
          "adlsAccountKey": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_storage_account'), '2022-09-01').outputs.storageAccountOutput.value.key]"
          },
          "azureOpenAIApiKey": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'deploy_azure_open_ai'), '2022-09-01').outputs.openAIOutput.value.openAPIKey]"
          },
          "azureOpenAIApiVersion": {
            "value": "2024-02-15-preview"
          },
          "azureOpenAIEndpoint": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'deploy_azure_open_ai'), '2022-09-01').outputs.openAIOutput.value.openAPIEndpoint]"
          },
          "azureSearchAdminKey": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'deploy_ai_search_service'), '2022-09-01').outputs.searchServiceOutput.value.searchServiceAdminKey]"
          },
          "azureSearchServiceEndpoint": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'deploy_ai_search_service'), '2022-09-01').outputs.searchServiceOutput.value.searchServiceEndpoint]"
          },
          "azureSearchServiceName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'deploy_ai_search_service'), '2022-09-01').outputs.searchServiceOutput.value.searchServiceName]"
          },
          "azureSearchIndex": {
            "value": "transcripts_index"
          },
          "cogServiceEndpoint": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'deploy_azure_ai_service'), '2022-09-01').outputs.cogSearchOutput.value.cogServiceEndpoint]"
          },
          "cogServiceName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'deploy_azure_ai_service'), '2022-09-01').outputs.cogSearchOutput.value.cogServiceName]"
          },
          "cogServiceKey": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'deploy_azure_ai_service'), '2022-09-01').outputs.cogSearchOutput.value.cogServiceKey]"
          },
          "postgresqlServerName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_postgres_sql'), '2022-09-01').outputs.postgreSQLDbOutput.value.postgresqlServerName]"
          },
          "postgresqlDbName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_postgres_sql'), '2022-09-01').outputs.postgreSQLDbOutput.value.postgresqlDbName]"
          },
          "postgresqlDbUser": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_postgres_sql'), '2022-09-01').outputs.postgreSQLDbOutput.value.postgresqlDbUser]"
          },
          "postgresqlDbPwd": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_postgres_sql'), '2022-09-01').outputs.postgreSQLDbOutput.value.postgresqlDbPwd]"
          },
          "sslMode": {
            "value": "Require"
          },
          "enableSoftDelete": {
            "value": false
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "9721337214704381083"
            }
          },
          "parameters": {
            "solutionName": {
              "type": "string",
              "minLength": 3,
              "maxLength": 15,
              "metadata": {
                "description": "Solution Name"
              }
            },
            "solutionLocation": {
              "type": "string",
              "metadata": {
                "description": "Solution Location"
              }
            },
            "utc": {
              "type": "string",
              "defaultValue": "[utcNow()]"
            },
            "kvName": {
              "type": "string",
              "defaultValue": "[format('{0}-kv-{1}', parameters('solutionName'), uniqueString(parameters('utc')))]",
              "metadata": {
                "description": "Name"
              }
            },
            "objectId": {
              "type": "string",
              "metadata": {
                "description": "Object Id. The object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault."
              }
            },
            "createMode": {
              "type": "string",
              "defaultValue": "default",
              "metadata": {
                "description": "Create Mode"
              }
            },
            "enableForDeployment": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enabled For Deployment. Property to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault."
              }
            },
            "enableForDiskEncryption": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enabled For Disk Encryption. Property to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys."
              }
            },
            "enableForTemplateDeployment": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enabled For Template Deployment. Property to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
              }
            },
            "enablePurgeProtection": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enable Purge Protection. Property specifying whether protection against purge is enabled for this vault."
              }
            },
            "enableRBACAuthorization": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enable RBAC Authorization. Property that controls how data actions are authorized."
              }
            },
            "enableSoftDelete": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enable Soft Delete. Property to specify whether the \"soft delete\" functionality is enabled for this key vault."
              }
            },
            "softDeleteRetentionInDays": {
              "type": "int",
              "defaultValue": 30,
              "metadata": {
                "description": "Soft Delete Retention in Days. softDelete data retention days. It accepts >=7 and <=90."
              }
            },
            "publicNetworkAccess": {
              "type": "string",
              "defaultValue": "enabled",
              "allowedValues": [
                "enabled",
                "disabled"
              ],
              "metadata": {
                "description": "Public Network Access, Property to specify whether the vault will accept traffic from public internet."
              }
            },
            "sku": {
              "type": "string",
              "defaultValue": "standard",
              "allowedValues": [
                "standard",
                "premium"
              ],
              "metadata": {
                "description": "SKU"
              }
            },
            "tenantId": {
              "type": "string",
              "metadata": {
                "description": "Tenant Id"
              }
            },
            "managedIdentityObjectId": {
              "type": "string"
            },
            "adlsAccountName": {
              "type": "string"
            },
            "adlsAccountKey": {
              "type": "securestring"
            },
            "azureOpenAIApiKey": {
              "type": "securestring"
            },
            "azureOpenAIApiVersion": {
              "type": "string"
            },
            "azureOpenAIEndpoint": {
              "type": "string"
            },
            "azureSearchAdminKey": {
              "type": "securestring"
            },
            "azureSearchServiceEndpoint": {
              "type": "string"
            },
            "azureSearchServiceName": {
              "type": "string"
            },
            "azureSearchIndex": {
              "type": "string"
            },
            "cogServiceEndpoint": {
              "type": "string"
            },
            "cogServiceKey": {
              "type": "securestring"
            },
            "cogServiceName": {
              "type": "string"
            },
            "postgresqlServerName": {
              "type": "string"
            },
            "postgresqlDbName": {
              "type": "string"
            },
            "postgresqlDbUser": {
              "type": "string"
            },
            "postgresqlDbPwd": {
              "type": "securestring"
            },
            "sslMode": {
              "type": "string",
              "defaultValue": "require"
            }
          },
          "variables": {
            "vaultUri": "[format('https://{0}.vault.azure.net/', parameters('kvName'))]"
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2022-07-01",
              "name": "[parameters('kvName')]",
              "location": "[parameters('solutionLocation')]",
              "tags": {
                "app": "[parameters('solutionName')]",
                "location": "[parameters('solutionLocation')]"
              },
              "properties": {
                "accessPolicies": [
                  {
                    "objectId": "[parameters('objectId')]",
                    "permissions": {
                      "certificates": [
                        "all"
                      ],
                      "keys": [
                        "all"
                      ],
                      "secrets": [
                        "all"
                      ],
                      "storage": [
                        "all"
                      ]
                    },
                    "tenantId": "[parameters('tenantId')]"
                  }
                ],
                "createMode": "[parameters('createMode')]",
                "enabledForDeployment": "[parameters('enableForDeployment')]",
                "enabledForDiskEncryption": "[parameters('enableForDiskEncryption')]",
                "enabledForTemplateDeployment": "[parameters('enableForTemplateDeployment')]",
                "enablePurgeProtection": "[parameters('enablePurgeProtection')]",
                "enableRbacAuthorization": "[parameters('enableRBACAuthorization')]",
                "enableSoftDelete": "[parameters('enableSoftDelete')]",
                "softDeleteRetentionInDays": "[parameters('softDeleteRetentionInDays')]",
                "provisioningState": "RegisteringDns",
                "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
                "sku": {
                  "family": "A",
                  "name": "[parameters('sku')]"
                },
                "tenantId": "[parameters('tenantId')]",
                "vaultUri": "[variables('vaultUri')]"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceGroup().id, parameters('managedIdentityObjectId'), resourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483'))]",
              "properties": {
                "principalId": "[parameters('managedIdentityObjectId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('kvName'), 'TENANT-ID')]",
              "properties": {
                "value": "[parameters('tenantId')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('kvName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('kvName'), 'ADLS-ACCOUNT-NAME')]",
              "properties": {
                "value": "[parameters('adlsAccountName')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('kvName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('kvName'), 'ADLS-ACCOUNT-KEY')]",
              "properties": {
                "value": "[parameters('adlsAccountKey')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('kvName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('kvName'), 'AZURE-OPENAI-KEY')]",
              "properties": {
                "value": "[parameters('azureOpenAIApiKey')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('kvName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('kvName'), 'AZURE-OPENAI-PREVIEW-API-VERSION')]",
              "properties": {
                "value": "[parameters('azureOpenAIApiVersion')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('kvName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('kvName'), 'AZURE-OPENAI-ENDPOINT')]",
              "properties": {
                "value": "[parameters('azureOpenAIEndpoint')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('kvName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('kvName'), 'AZURE-SEARCH-KEY')]",
              "properties": {
                "value": "[parameters('azureSearchAdminKey')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('kvName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('kvName'), 'AZURE-SEARCH-ENDPOINT')]",
              "properties": {
                "value": "[parameters('azureSearchServiceEndpoint')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('kvName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('kvName'), 'AZURE-SEARCH-SERVICE')]",
              "properties": {
                "value": "[parameters('azureSearchServiceName')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('kvName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('kvName'), 'AZURE-SEARCH-INDEX')]",
              "properties": {
                "value": "[parameters('azureSearchIndex')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('kvName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('kvName'), 'COG-SERVICES-ENDPOINT')]",
              "properties": {
                "value": "[parameters('cogServiceEndpoint')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('kvName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('kvName'), 'COG-SERVICES-KEY')]",
              "properties": {
                "value": "[parameters('cogServiceKey')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('kvName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('kvName'), 'COG-SERVICES-NAME')]",
              "properties": {
                "value": "[parameters('cogServiceName')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('kvName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('kvName'), 'AZURE-SUBSCRIPTION-ID')]",
              "properties": {
                "value": "[subscription().subscriptionId]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('kvName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('kvName'), 'AZURE-RESOURCE-GROUP')]",
              "properties": {
                "value": "[resourceGroup().name]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('kvName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('kvName'), 'AZURE-LOCATION')]",
              "properties": {
                "value": "[parameters('solutionLocation')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('kvName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('kvName'), 'POSTGRESQL-SERVER')]",
              "properties": {
                "value": "[parameters('postgresqlServerName')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('kvName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('kvName'), 'POSTGRESQL-DATABASENAME')]",
              "properties": {
                "value": "[parameters('postgresqlDbName')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('kvName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('kvName'), 'POSTGRESQL-USER')]",
              "properties": {
                "value": "[parameters('postgresqlDbUser')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('kvName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('kvName'), 'POSTGRESQL-PASSWORD')]",
              "properties": {
                "value": "[parameters('postgresqlDbPwd')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('kvName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('kvName'), 'SSLMODE')]",
              "properties": {
                "value": "[parameters('sslMode')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('kvName'))]"
              ]
            }
          ],
          "outputs": {
            "keyvaultOutput": {
              "type": "object",
              "value": {
                "id": "[resourceId('Microsoft.KeyVault/vaults', parameters('kvName'))]",
                "name": "[parameters('kvName')]",
                "uri": "[variables('vaultUri')]",
                "resource": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('kvName')), '2022-07-01', 'full')]"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'deploy_azure_ai_service')]",
        "[resourceId('Microsoft.Resources/deployments', 'deploy_azure_open_ai')]",
        "[resourceId('Microsoft.Resources/deployments', 'deploy_ai_search_service')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_postgres_sql')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_storage_account')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_index_scripts",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "solutionLocation": {
            "value": "[variables('solutionLocation')]"
          },
          "identity": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityOutput.value.id]"
          },
          "baseUrl": {
            "value": "[variables('baseUrl')]"
          },
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_keyvault'), '2022-09-01').outputs.keyvaultOutput.value.name]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "4307519442711409663"
            }
          },
          "parameters": {
            "solutionLocation": {
              "type": "string",
              "metadata": {
                "description": "Specifies the location for resources."
              }
            },
            "baseUrl": {
              "type": "string"
            },
            "keyVaultName": {
              "type": "string"
            },
            "identity": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2020-10-01",
              "name": "create_search_indexes",
              "kind": "AzureCLI",
              "location": "[parameters('solutionLocation')]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', parameters('identity'))]": {}
                }
              },
              "properties": {
                "azCliVersion": "2.52.0",
                "primaryScriptUri": "[format('{0}Deployment/scripts/run_create_index_scripts.sh', parameters('baseUrl'))]",
                "arguments": "[format('{0} {1}', parameters('baseUrl'), parameters('keyVaultName'))]",
                "timeout": "PT1H",
                "retentionInterval": "PT1H",
                "cleanupPreference": "OnSuccess"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_keyvault')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_app_service",
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "identity": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityOutput.value.id]"
          },
          "solutionName": {
            "value": "[parameters('solutionPrefix')]"
          },
          "solutionLocation": {
            "value": "[variables('solutionLocation')]"
          },
          "AzureSearchService": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'deploy_ai_search_service'), '2022-09-01').outputs.searchServiceOutput.value.searchServiceName]"
          },
          "AzureSearchIndex": {
            "value": "transcripts_index"
          },
          "AzureSearchKey": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'deploy_ai_search_service'), '2022-09-01').outputs.searchServiceOutput.value.searchServiceAdminKey]"
          },
          "AzureSearchUseSemanticSearch": {
            "value": "True"
          },
          "AzureSearchSemanticSearchConfig": {
            "value": "my-semantic-config"
          },
          "AzureSearchIndexIsPrechunked": {
            "value": "False"
          },
          "AzureSearchTopK": {
            "value": "5"
          },
          "AzureSearchContentColumns": {
            "value": "content"
          },
          "AzureSearchFilenameColumn": {
            "value": "chunk_id"
          },
          "AzureSearchTitleColumn": {
            "value": "client_id"
          },
          "AzureSearchUrlColumn": {
            "value": "sourceurl"
          },
          "AzureOpenAIResource": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'deploy_azure_open_ai'), '2022-09-01').outputs.openAIOutput.value.openAPIEndpoint]"
          },
          "AzureOpenAIEndpoint": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'deploy_azure_open_ai'), '2022-09-01').outputs.openAIOutput.value.openAPIEndpoint]"
          },
          "AzureOpenAIModel": {
            "value": "gpt-4"
          },
          "AzureOpenAIKey": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'deploy_azure_open_ai'), '2022-09-01').outputs.openAIOutput.value.openAPIKey]"
          },
          "AzureOpenAIModelName": {
            "value": "gpt-4"
          },
          "AzureOpenAITemperature": {
            "value": "0"
          },
          "AzureOpenAITopP": {
            "value": "1"
          },
          "AzureOpenAIMaxTokens": {
            "value": "1000"
          },
          "AzureOpenAIStopSequence": {
            "value": ""
          },
          "AzureOpenAISystemMessage": {
            "value": "You are a helpful Wealth Advisor assistant"
          },
          "AzureOpenAIApiVersion": {
            "value": "2024-02-15-preview"
          },
          "AzureOpenAIStream": {
            "value": "True"
          },
          "AzureSearchQueryType": {
            "value": "simple"
          },
          "AzureSearchVectorFields": {
            "value": "contentVector"
          },
          "AzureSearchPermittedGroupsField": {
            "value": ""
          },
          "AzureSearchStrictness": {
            "value": "3"
          },
          "AzureOpenAIEmbeddingName": {
            "value": "text-embedding-ada-002"
          },
          "AzureOpenAIEmbeddingkey": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'deploy_azure_open_ai'), '2022-09-01').outputs.openAIOutput.value.openAPIKey]"
          },
          "AzureOpenAIEmbeddingEndpoint": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'deploy_azure_open_ai'), '2022-09-01').outputs.openAIOutput.value.openAPIEndpoint]"
          },
          "USE_AZUREFUNCTION": {
            "value": "True"
          },
          "STREAMING_AZUREFUNCTION_ENDPOINT": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'deploy_azure_function_script_url'), '2022-09-01').outputs.functionAppUrl.value]"
          },
          "POSTGRESQL_SERVER": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_postgres_sql'), '2022-09-01').outputs.postgreSQLDbOutput.value.postgresqlServerName]"
          },
          "POSTGRESQL_DATABASE": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_postgres_sql'), '2022-09-01').outputs.postgreSQLDbOutput.value.postgresqlDbName]"
          },
          "POSTGRESQL_USERNAME": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_postgres_sql'), '2022-09-01').outputs.postgreSQLDbOutput.value.postgresqlDbUser]"
          },
          "POSTGRESQL_PASSWORD": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_postgres_sql'), '2022-09-01').outputs.postgreSQLDbOutput.value.postgresqlDbPwd]"
          },
          "AZURE_COSMOSDB_ACCOUNT": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_cosmos_db'), '2022-09-01').outputs.cosmosOutput.value.cosmosAccountName]"
          },
          "AZURE_COSMOSDB_ACCOUNT_KEY": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_cosmos_db'), '2022-09-01').outputs.cosmosOutput.value.cosmosAccountKey]"
          },
          "AZURE_COSMOSDB_CONVERSATIONS_CONTAINER": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_cosmos_db'), '2022-09-01').outputs.cosmosOutput.value.cosmosContainerName]"
          },
          "AZURE_COSMOSDB_DATABASE": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_cosmos_db'), '2022-09-01').outputs.cosmosOutput.value.cosmosDatabaseName]"
          },
          "AZURE_COSMOSDB_ENABLE_FEEDBACK": {
            "value": "True"
          },
          "VITE_POWERBI_EMBED_URL": {
            "value": "TBD"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "15047938659289544647"
            }
          },
          "parameters": {
            "solutionName": {
              "type": "string",
              "minLength": 3,
              "maxLength": 15,
              "metadata": {
                "description": "Solution Name"
              }
            },
            "solutionLocation": {
              "type": "string",
              "metadata": {
                "description": "Solution Location"
              }
            },
            "identity": {
              "type": "string"
            },
            "HostingPlanName": {
              "type": "string",
              "defaultValue": "[format('{0}-app-service-plan', parameters('solutionName'))]",
              "metadata": {
                "description": "Name of App Service plan"
              }
            },
            "HostingPlanSku": {
              "type": "string",
              "defaultValue": "P0v3",
              "allowedValues": [
                "F1",
                "D1",
                "B1",
                "B2",
                "B3",
                "S1",
                "S2",
                "S3",
                "P1",
                "P2",
                "P3",
                "P4",
                "P0v3"
              ],
              "metadata": {
                "description": "The pricing tier for the App Service plan"
              }
            },
            "WebsiteName": {
              "type": "string",
              "defaultValue": "[format('{0}-app-service', parameters('solutionName'))]",
              "metadata": {
                "description": "Name of Web App"
              }
            },
            "ApplicationInsightsName": {
              "type": "string",
              "defaultValue": "[format('{0}-app-insights', parameters('solutionName'))]",
              "metadata": {
                "description": "Name of Application Insights"
              }
            },
            "AzureSearchService": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Name of Azure Search Service"
              }
            },
            "AzureSearchIndex": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Name of Azure Search Index"
              }
            },
            "AzureSearchKey": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "Azure Search Admin Key"
              }
            },
            "AzureSearchUseSemanticSearch": {
              "type": "string",
              "defaultValue": "False",
              "metadata": {
                "description": "Use semantic search"
              }
            },
            "AzureSearchSemanticSearchConfig": {
              "type": "string",
              "defaultValue": "default",
              "metadata": {
                "description": "Semantic search config"
              }
            },
            "AzureSearchIndexIsPrechunked": {
              "type": "string",
              "defaultValue": "False",
              "metadata": {
                "description": "Is the index prechunked"
              }
            },
            "AzureSearchTopK": {
              "type": "string",
              "defaultValue": "5",
              "metadata": {
                "description": "Top K results"
              }
            },
            "AzureSearchEnableInDomain": {
              "type": "string",
              "defaultValue": "False",
              "metadata": {
                "description": "Enable in domain"
              }
            },
            "AzureSearchContentColumns": {
              "type": "string",
              "defaultValue": "content",
              "metadata": {
                "description": "Content columns"
              }
            },
            "AzureSearchFilenameColumn": {
              "type": "string",
              "defaultValue": "filename",
              "metadata": {
                "description": "Filename column"
              }
            },
            "AzureSearchTitleColumn": {
              "type": "string",
              "defaultValue": "client_id",
              "metadata": {
                "description": "Title column"
              }
            },
            "AzureSearchUrlColumn": {
              "type": "string",
              "defaultValue": "sourceurl",
              "metadata": {
                "description": "Url column"
              }
            },
            "AzureOpenAIResource": {
              "type": "string",
              "metadata": {
                "description": "Name of Azure OpenAI Resource"
              }
            },
            "AzureOpenAIModel": {
              "type": "string",
              "metadata": {
                "description": "Azure OpenAI Model Deployment Name"
              }
            },
            "AzureOpenAIModelName": {
              "type": "string",
              "defaultValue": "gpt-4",
              "metadata": {
                "description": "Azure OpenAI Model Name"
              }
            },
            "AzureOpenAIEndpoint": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Azure Open AI Endpoint"
              }
            },
            "AzureOpenAIKey": {
              "type": "securestring",
              "metadata": {
                "description": "Azure OpenAI Key"
              }
            },
            "AzureOpenAITemperature": {
              "type": "string",
              "defaultValue": "0",
              "metadata": {
                "description": "Azure OpenAI Temperature"
              }
            },
            "AzureOpenAITopP": {
              "type": "string",
              "defaultValue": "1",
              "metadata": {
                "description": "Azure OpenAI Top P"
              }
            },
            "AzureOpenAIMaxTokens": {
              "type": "string",
              "defaultValue": "1000",
              "metadata": {
                "description": "Azure OpenAI Max Tokens"
              }
            },
            "AzureOpenAIStopSequence": {
              "type": "string",
              "defaultValue": "\n",
              "metadata": {
                "description": "Azure OpenAI Stop Sequence"
              }
            },
            "AzureOpenAISystemMessage": {
              "type": "string",
              "defaultValue": "You are an AI assistant that helps people find information.",
              "metadata": {
                "description": "Azure OpenAI System Message"
              }
            },
            "AzureOpenAIApiVersion": {
              "type": "string",
              "defaultValue": "2024-02-15-preview",
              "metadata": {
                "description": "Azure OpenAI Api Version"
              }
            },
            "AzureOpenAIStream": {
              "type": "string",
              "defaultValue": "True",
              "metadata": {
                "description": "Whether or not to stream responses from Azure OpenAI"
              }
            },
            "AzureSearchQueryType": {
              "type": "string",
              "defaultValue": "simple",
              "allowedValues": [
                "simple",
                "semantic",
                "vector",
                "vectorSimpleHybrid",
                "vectorSemanticHybrid"
              ],
              "metadata": {
                "description": "Azure Search Query Type"
              }
            },
            "AzureSearchVectorFields": {
              "type": "string",
              "defaultValue": "contentVector",
              "metadata": {
                "description": "Azure Search Vector Fields"
              }
            },
            "AzureSearchPermittedGroupsField": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Azure Search Permitted Groups Field"
              }
            },
            "AzureSearchStrictness": {
              "type": "string",
              "defaultValue": "3",
              "allowedValues": [
                "1",
                "2",
                "3",
                "4",
                "5"
              ],
              "metadata": {
                "description": "Azure Search Strictness"
              }
            },
            "AzureOpenAIEmbeddingName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Azure OpenAI Embedding Deployment Name"
              }
            },
            "AzureOpenAIEmbeddingkey": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Azure Open AI Embedding Key"
              }
            },
            "AzureOpenAIEmbeddingEndpoint": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Azure Open AI Embedding Endpoint"
              }
            },
            "WebAppEnableChatHistory": {
              "type": "string",
              "defaultValue": "False",
              "metadata": {
                "description": "Enable chat history by deploying a Cosmos DB instance"
              }
            },
            "USE_AZUREFUNCTION": {
              "type": "string",
              "defaultValue": "True",
              "metadata": {
                "description": "Use Azure Function"
              }
            },
            "STREAMING_AZUREFUNCTION_ENDPOINT": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Azure Function Endpoint"
              }
            },
            "AZURE_COSMOSDB_ACCOUNT": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Azure Cosmos DB Account"
              }
            },
            "AZURE_COSMOSDB_ACCOUNT_KEY": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "Azure Cosmos DB Account Key"
              }
            },
            "AZURE_COSMOSDB_CONVERSATIONS_CONTAINER": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Azure Cosmos DB Conversations Container"
              }
            },
            "AZURE_COSMOSDB_DATABASE": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Azure Cosmos DB Database"
              }
            },
            "AZURE_COSMOSDB_ENABLE_FEEDBACK": {
              "type": "string",
              "defaultValue": "True",
              "metadata": {
                "description": "Enable feedback in Cosmos DB"
              }
            },
            "POSTGRESQL_SERVER": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "PostgreSQL Server Name"
              }
            },
            "POSTGRESQL_DATABASE": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "PostgreSQL Database Name"
              }
            },
            "POSTGRESQL_USERNAME": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "PostgreSQL Username"
              }
            },
            "POSTGRESQL_PASSWORD": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "PostgreSQL Password"
              }
            },
            "VITE_POWERBI_EMBED_URL": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Power BI Embed URL"
              }
            }
          },
          "variables": {
            "WebAppImageName": "DOCKER|bycwacontainerreg.azurecr.io/byc-wa-app:latest"
          },
          "resources": [
            {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2020-06-01",
              "name": "[parameters('HostingPlanName')]",
              "location": "[resourceGroup().location]",
              "sku": {
                "name": "[parameters('HostingPlanSku')]"
              },
              "properties": {
                "name": "[parameters('HostingPlanName')]",
                "reserved": true
              },
              "kind": "linux"
            },
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2020-06-01",
              "name": "[parameters('WebsiteName')]",
              "location": "[resourceGroup().location]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "serverFarmId": "[parameters('HostingPlanName')]",
                "siteConfig": {
                  "appSettings": [
                    {
                      "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                      "value": "[reference(resourceId('Microsoft.Insights/components', parameters('ApplicationInsightsName')), '2015-05-01').InstrumentationKey]"
                    },
                    {
                      "name": "AZURE_SEARCH_SERVICE",
                      "value": "[parameters('AzureSearchService')]"
                    },
                    {
                      "name": "AZURE_SEARCH_INDEX",
                      "value": "[parameters('AzureSearchIndex')]"
                    },
                    {
                      "name": "AZURE_SEARCH_KEY",
                      "value": "[parameters('AzureSearchKey')]"
                    },
                    {
                      "name": "AZURE_SEARCH_USE_SEMANTIC_SEARCH",
                      "value": "[parameters('AzureSearchUseSemanticSearch')]"
                    },
                    {
                      "name": "AZURE_SEARCH_SEMANTIC_SEARCH_CONFIG",
                      "value": "[parameters('AzureSearchSemanticSearchConfig')]"
                    },
                    {
                      "name": "AZURE_SEARCH_INDEX_IS_PRECHUNKED",
                      "value": "[parameters('AzureSearchIndexIsPrechunked')]"
                    },
                    {
                      "name": "AZURE_SEARCH_TOP_K",
                      "value": "[parameters('AzureSearchTopK')]"
                    },
                    {
                      "name": "AZURE_SEARCH_ENABLE_IN_DOMAIN",
                      "value": "[parameters('AzureSearchEnableInDomain')]"
                    },
                    {
                      "name": "AZURE_SEARCH_CONTENT_COLUMNS",
                      "value": "[parameters('AzureSearchContentColumns')]"
                    },
                    {
                      "name": "AZURE_SEARCH_FILENAME_COLUMN",
                      "value": "[parameters('AzureSearchFilenameColumn')]"
                    },
                    {
                      "name": "AZURE_SEARCH_TITLE_COLUMN",
                      "value": "[parameters('AzureSearchTitleColumn')]"
                    },
                    {
                      "name": "AZURE_SEARCH_URL_COLUMN",
                      "value": "[parameters('AzureSearchUrlColumn')]"
                    },
                    {
                      "name": "AZURE_OPENAI_RESOURCE",
                      "value": "[parameters('AzureOpenAIResource')]"
                    },
                    {
                      "name": "AZURE_OPENAI_MODEL",
                      "value": "[parameters('AzureOpenAIModel')]"
                    },
                    {
                      "name": "AZURE_OPENAI_ENDPOINT",
                      "value": "[parameters('AzureOpenAIEndpoint')]"
                    },
                    {
                      "name": "AZURE_OPENAI_KEY",
                      "value": "[parameters('AzureOpenAIKey')]"
                    },
                    {
                      "name": "AZURE_OPENAI_MODEL_NAME",
                      "value": "[parameters('AzureOpenAIModelName')]"
                    },
                    {
                      "name": "AZURE_OPENAI_TEMPERATURE",
                      "value": "[parameters('AzureOpenAITemperature')]"
                    },
                    {
                      "name": "AZURE_OPENAI_TOP_P",
                      "value": "[parameters('AzureOpenAITopP')]"
                    },
                    {
                      "name": "AZURE_OPENAI_MAX_TOKENS",
                      "value": "[parameters('AzureOpenAIMaxTokens')]"
                    },
                    {
                      "name": "AZURE_OPENAI_STOP_SEQUENCE",
                      "value": "[parameters('AzureOpenAIStopSequence')]"
                    },
                    {
                      "name": "AZURE_OPENAI_SYSTEM_MESSAGE",
                      "value": "[parameters('AzureOpenAISystemMessage')]"
                    },
                    {
                      "name": "AZURE_OPENAI_PREVIEW_API_VERSION",
                      "value": "[parameters('AzureOpenAIApiVersion')]"
                    },
                    {
                      "name": "AZURE_OPENAI_STREAM",
                      "value": "[parameters('AzureOpenAIStream')]"
                    },
                    {
                      "name": "AZURE_SEARCH_QUERY_TYPE",
                      "value": "[parameters('AzureSearchQueryType')]"
                    },
                    {
                      "name": "AZURE_SEARCH_VECTOR_COLUMNS",
                      "value": "[parameters('AzureSearchVectorFields')]"
                    },
                    {
                      "name": "AZURE_SEARCH_PERMITTED_GROUPS_COLUMN",
                      "value": "[parameters('AzureSearchPermittedGroupsField')]"
                    },
                    {
                      "name": "AZURE_SEARCH_STRICTNESS",
                      "value": "[parameters('AzureSearchStrictness')]"
                    },
                    {
                      "name": "AZURE_OPENAI_EMBEDDING_NAME",
                      "value": "[parameters('AzureOpenAIEmbeddingName')]"
                    },
                    {
                      "name": "AZURE_OPENAI_EMBEDDING_KEY",
                      "value": "[parameters('AzureOpenAIEmbeddingkey')]"
                    },
                    {
                      "name": "AZURE_OPENAI_EMBEDDING_ENDPOINT",
                      "value": "[parameters('AzureOpenAIEmbeddingEndpoint')]"
                    },
                    {
                      "name": "WEB_APP_ENABLE_CHAT_HISTORY",
                      "value": "[parameters('WebAppEnableChatHistory')]"
                    },
                    {
                      "name": "POSTGRESQL_SERVER",
                      "value": "[parameters('POSTGRESQL_SERVER')]"
                    },
                    {
                      "name": "POSTGRESQL_DATABASE",
                      "value": "[parameters('POSTGRESQL_DATABASE')]"
                    },
                    {
                      "name": "POSTGRESQL_USERNAME",
                      "value": "[parameters('POSTGRESQL_USERNAME')]"
                    },
                    {
                      "name": "POSTGRESQL_PASSWORD",
                      "value": "[parameters('POSTGRESQL_PASSWORD')]"
                    },
                    {
                      "name": "USE_AZUREFUNCTION",
                      "value": "[parameters('USE_AZUREFUNCTION')]"
                    },
                    {
                      "name": "STREAMING_AZUREFUNCTION_ENDPOINT",
                      "value": "[parameters('STREAMING_AZUREFUNCTION_ENDPOINT')]"
                    },
                    {
                      "name": "AZURE_COSMOSDB_ACCOUNT",
                      "value": "[parameters('AZURE_COSMOSDB_ACCOUNT')]"
                    },
                    {
                      "name": "AZURE_COSMOSDB_ACCOUNT_KEY",
                      "value": "[parameters('AZURE_COSMOSDB_ACCOUNT_KEY')]"
                    },
                    {
                      "name": "AZURE_COSMOSDB_CONVERSATIONS_CONTAINER",
                      "value": "[parameters('AZURE_COSMOSDB_CONVERSATIONS_CONTAINER')]"
                    },
                    {
                      "name": "AZURE_COSMOSDB_DATABASE",
                      "value": "[parameters('AZURE_COSMOSDB_DATABASE')]"
                    },
                    {
                      "name": "AZURE_COSMOSDB_ENABLE_FEEDBACK",
                      "value": "[parameters('AZURE_COSMOSDB_ENABLE_FEEDBACK')]"
                    },
                    {
                      "name": "VITE_POWERBI_EMBED_URL",
                      "value": "[parameters('VITE_POWERBI_EMBED_URL')]"
                    },
                    {
                      "name": "SCM_DO_BUILD_DURING_DEPLOYMENT",
                      "value": "true"
                    },
                    {
                      "name": "UWSGI_PROCESSES",
                      "value": "2"
                    },
                    {
                      "name": "UWSGI_THREADS",
                      "value": "2"
                    }
                  ],
                  "linuxFxVersion": "[variables('WebAppImageName')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Insights/components', parameters('ApplicationInsightsName'))]",
                "[resourceId('Microsoft.Web/serverfarms', parameters('HostingPlanName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[parameters('ApplicationInsightsName')]",
              "location": "[resourceGroup().location]",
              "tags": {
                "[format('hidden-link:{0}', resourceId('Microsoft.Web/sites', parameters('ApplicationInsightsName')))]": "Resource"
              },
              "properties": {
                "Application_Type": "web"
              },
              "kind": "web"
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'deploy_azure_ai_service')]",
        "[resourceId('Microsoft.Resources/deployments', 'deploy_azure_open_ai')]",
        "[resourceId('Microsoft.Resources/deployments', 'deploy_ai_search_service')]",
        "[resourceId('Microsoft.Resources/deployments', 'deploy_azure_function_script_url')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_cosmos_db')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_postgres_sql')]"
      ]
    }
  ]
}